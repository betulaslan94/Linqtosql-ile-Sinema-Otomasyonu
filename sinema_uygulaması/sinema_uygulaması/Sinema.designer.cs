#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace sinema_uygulaması
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Sinema")]
	public partial class SinemaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertsalon(salon instance);
    partial void Updatesalon(salon instance);
    partial void Deletesalon(salon instance);
    partial void Insertsean(sean instance);
    partial void Updatesean(sean instance);
    partial void Deletesean(sean instance);
    partial void Insertfilm(film instance);
    partial void Updatefilm(film instance);
    partial void Deletefilm(film instance);
    partial void Insertbilet(bilet instance);
    partial void Updatebilet(bilet instance);
    partial void Deletebilet(bilet instance);
    #endregion
		
		public SinemaDataContext() : 
				base(global::sinema_uygulaması.Properties.Settings.Default.SinemaConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SinemaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SinemaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SinemaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SinemaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<salon> salons
		{
			get
			{
				return this.GetTable<salon>();
			}
		}
		
		public System.Data.Linq.Table<sean> seans
		{
			get
			{
				return this.GetTable<sean>();
			}
		}
		
		public System.Data.Linq.Table<film> films
		{
			get
			{
				return this.GetTable<film>();
			}
		}
		
		public System.Data.Linq.Table<bilet> bilets
		{
			get
			{
				return this.GetTable<bilet>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.salon")]
	public partial class salon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _salon_id;
		
		private string _sAdi;
		
		private int _kapasite;
		
		private EntitySet<film> _films;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onsalon_idChanging(int value);
    partial void Onsalon_idChanged();
    partial void OnsAdiChanging(string value);
    partial void OnsAdiChanged();
    partial void OnkapasiteChanging(int value);
    partial void OnkapasiteChanged();
    #endregion
		
		public salon()
		{
			this._films = new EntitySet<film>(new Action<film>(this.attach_films), new Action<film>(this.detach_films));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salon_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int salon_id
		{
			get
			{
				return this._salon_id;
			}
			set
			{
				if ((this._salon_id != value))
				{
					this.Onsalon_idChanging(value);
					this.SendPropertyChanging();
					this._salon_id = value;
					this.SendPropertyChanged("salon_id");
					this.Onsalon_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sAdi", DbType="NVarChar(50)")]
		public string sAdi
		{
			get
			{
				return this._sAdi;
			}
			set
			{
				if ((this._sAdi != value))
				{
					this.OnsAdiChanging(value);
					this.SendPropertyChanging();
					this._sAdi = value;
					this.SendPropertyChanged("sAdi");
					this.OnsAdiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kapasite", DbType="Int NOT NULL")]
		public int kapasite
		{
			get
			{
				return this._kapasite;
			}
			set
			{
				if ((this._kapasite != value))
				{
					this.OnkapasiteChanging(value);
					this.SendPropertyChanging();
					this._kapasite = value;
					this.SendPropertyChanged("kapasite");
					this.OnkapasiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="salon_film", Storage="_films", ThisKey="salon_id", OtherKey="salon_id")]
		public EntitySet<film> films
		{
			get
			{
				return this._films;
			}
			set
			{
				this._films.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_films(film entity)
		{
			this.SendPropertyChanging();
			entity.salon = this;
		}
		
		private void detach_films(film entity)
		{
			this.SendPropertyChanging();
			entity.salon = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.seans")]
	public partial class sean : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _seans_id;
		
		private string _saat;
		
		private EntitySet<bilet> _bilets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onseans_idChanging(int value);
    partial void Onseans_idChanged();
    partial void OnsaatChanging(string value);
    partial void OnsaatChanged();
    #endregion
		
		public sean()
		{
			this._bilets = new EntitySet<bilet>(new Action<bilet>(this.attach_bilets), new Action<bilet>(this.detach_bilets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_seans_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int seans_id
		{
			get
			{
				return this._seans_id;
			}
			set
			{
				if ((this._seans_id != value))
				{
					this.Onseans_idChanging(value);
					this.SendPropertyChanging();
					this._seans_id = value;
					this.SendPropertyChanged("seans_id");
					this.Onseans_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_saat", DbType="NVarChar(50)")]
		public string saat
		{
			get
			{
				return this._saat;
			}
			set
			{
				if ((this._saat != value))
				{
					this.OnsaatChanging(value);
					this.SendPropertyChanging();
					this._saat = value;
					this.SendPropertyChanged("saat");
					this.OnsaatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sean_bilet", Storage="_bilets", ThisKey="seans_id", OtherKey="seans_id")]
		public EntitySet<bilet> bilets
		{
			get
			{
				return this._bilets;
			}
			set
			{
				this._bilets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_bilets(bilet entity)
		{
			this.SendPropertyChanging();
			entity.sean = this;
		}
		
		private void detach_bilets(bilet entity)
		{
			this.SendPropertyChanging();
			entity.sean = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.film")]
	public partial class film : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _film_id;
		
		private string _fAdi;
		
		private string _fTur;
		
		private string _sure;
		
		private string _resim;
		
		private System.Nullable<int> _salon_id;
		
		private EntitySet<bilet> _bilets;
		
		private EntityRef<salon> _salon;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onfilm_idChanging(int value);
    partial void Onfilm_idChanged();
    partial void OnfAdiChanging(string value);
    partial void OnfAdiChanged();
    partial void OnfTurChanging(string value);
    partial void OnfTurChanged();
    partial void OnsureChanging(string value);
    partial void OnsureChanged();
    partial void OnresimChanging(string value);
    partial void OnresimChanged();
    partial void Onsalon_idChanging(System.Nullable<int> value);
    partial void Onsalon_idChanged();
    #endregion
		
		public film()
		{
			this._bilets = new EntitySet<bilet>(new Action<bilet>(this.attach_bilets), new Action<bilet>(this.detach_bilets));
			this._salon = default(EntityRef<salon>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_film_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int film_id
		{
			get
			{
				return this._film_id;
			}
			set
			{
				if ((this._film_id != value))
				{
					this.Onfilm_idChanging(value);
					this.SendPropertyChanging();
					this._film_id = value;
					this.SendPropertyChanged("film_id");
					this.Onfilm_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fAdi", DbType="NVarChar(50)")]
		public string fAdi
		{
			get
			{
				return this._fAdi;
			}
			set
			{
				if ((this._fAdi != value))
				{
					this.OnfAdiChanging(value);
					this.SendPropertyChanging();
					this._fAdi = value;
					this.SendPropertyChanged("fAdi");
					this.OnfAdiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fTur", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string fTur
		{
			get
			{
				return this._fTur;
			}
			set
			{
				if ((this._fTur != value))
				{
					this.OnfTurChanging(value);
					this.SendPropertyChanging();
					this._fTur = value;
					this.SendPropertyChanged("fTur");
					this.OnfTurChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sure", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string sure
		{
			get
			{
				return this._sure;
			}
			set
			{
				if ((this._sure != value))
				{
					this.OnsureChanging(value);
					this.SendPropertyChanging();
					this._sure = value;
					this.SendPropertyChanged("sure");
					this.OnsureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_resim", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string resim
		{
			get
			{
				return this._resim;
			}
			set
			{
				if ((this._resim != value))
				{
					this.OnresimChanging(value);
					this.SendPropertyChanging();
					this._resim = value;
					this.SendPropertyChanged("resim");
					this.OnresimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salon_id", DbType="Int")]
		public System.Nullable<int> salon_id
		{
			get
			{
				return this._salon_id;
			}
			set
			{
				if ((this._salon_id != value))
				{
					if (this._salon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsalon_idChanging(value);
					this.SendPropertyChanging();
					this._salon_id = value;
					this.SendPropertyChanged("salon_id");
					this.Onsalon_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_bilet", Storage="_bilets", ThisKey="film_id", OtherKey="film_id")]
		public EntitySet<bilet> bilets
		{
			get
			{
				return this._bilets;
			}
			set
			{
				this._bilets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="salon_film", Storage="_salon", ThisKey="salon_id", OtherKey="salon_id", IsForeignKey=true)]
		public salon salon
		{
			get
			{
				return this._salon.Entity;
			}
			set
			{
				salon previousValue = this._salon.Entity;
				if (((previousValue != value) 
							|| (this._salon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._salon.Entity = null;
						previousValue.films.Remove(this);
					}
					this._salon.Entity = value;
					if ((value != null))
					{
						value.films.Add(this);
						this._salon_id = value.salon_id;
					}
					else
					{
						this._salon_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("salon");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_bilets(bilet entity)
		{
			this.SendPropertyChanging();
			entity.film = this;
		}
		
		private void detach_bilets(bilet entity)
		{
			this.SendPropertyChanging();
			entity.film = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.bilet")]
	public partial class bilet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _bilet_id;
		
		private System.Nullable<int> _film_id;
		
		private System.Nullable<int> _seans_id;
		
		private System.DateTime _tarih;
		
		private string _koltuk_no;
		
		private decimal _ucret;
		
		private EntityRef<film> _film;
		
		private EntityRef<sean> _sean;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onbilet_idChanging(int value);
    partial void Onbilet_idChanged();
    partial void Onfilm_idChanging(System.Nullable<int> value);
    partial void Onfilm_idChanged();
    partial void Onseans_idChanging(System.Nullable<int> value);
    partial void Onseans_idChanged();
    partial void OntarihChanging(System.DateTime value);
    partial void OntarihChanged();
    partial void Onkoltuk_noChanging(string value);
    partial void Onkoltuk_noChanged();
    partial void OnucretChanging(decimal value);
    partial void OnucretChanged();
    #endregion
		
		public bilet()
		{
			this._film = default(EntityRef<film>);
			this._sean = default(EntityRef<sean>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bilet_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int bilet_id
		{
			get
			{
				return this._bilet_id;
			}
			set
			{
				if ((this._bilet_id != value))
				{
					this.Onbilet_idChanging(value);
					this.SendPropertyChanging();
					this._bilet_id = value;
					this.SendPropertyChanged("bilet_id");
					this.Onbilet_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_film_id", DbType="Int")]
		public System.Nullable<int> film_id
		{
			get
			{
				return this._film_id;
			}
			set
			{
				if ((this._film_id != value))
				{
					if (this._film.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfilm_idChanging(value);
					this.SendPropertyChanging();
					this._film_id = value;
					this.SendPropertyChanged("film_id");
					this.Onfilm_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_seans_id", DbType="Int")]
		public System.Nullable<int> seans_id
		{
			get
			{
				return this._seans_id;
			}
			set
			{
				if ((this._seans_id != value))
				{
					if (this._sean.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onseans_idChanging(value);
					this.SendPropertyChanging();
					this._seans_id = value;
					this.SendPropertyChanged("seans_id");
					this.Onseans_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tarih", DbType="DateTime NOT NULL")]
		public System.DateTime tarih
		{
			get
			{
				return this._tarih;
			}
			set
			{
				if ((this._tarih != value))
				{
					this.OntarihChanging(value);
					this.SendPropertyChanging();
					this._tarih = value;
					this.SendPropertyChanged("tarih");
					this.OntarihChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_koltuk_no", DbType="NVarChar(10)")]
		public string koltuk_no
		{
			get
			{
				return this._koltuk_no;
			}
			set
			{
				if ((this._koltuk_no != value))
				{
					this.Onkoltuk_noChanging(value);
					this.SendPropertyChanging();
					this._koltuk_no = value;
					this.SendPropertyChanged("koltuk_no");
					this.Onkoltuk_noChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ucret", DbType="Money NOT NULL")]
		public decimal ucret
		{
			get
			{
				return this._ucret;
			}
			set
			{
				if ((this._ucret != value))
				{
					this.OnucretChanging(value);
					this.SendPropertyChanging();
					this._ucret = value;
					this.SendPropertyChanged("ucret");
					this.OnucretChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_bilet", Storage="_film", ThisKey="film_id", OtherKey="film_id", IsForeignKey=true)]
		public film film
		{
			get
			{
				return this._film.Entity;
			}
			set
			{
				film previousValue = this._film.Entity;
				if (((previousValue != value) 
							|| (this._film.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._film.Entity = null;
						previousValue.bilets.Remove(this);
					}
					this._film.Entity = value;
					if ((value != null))
					{
						value.bilets.Add(this);
						this._film_id = value.film_id;
					}
					else
					{
						this._film_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("film");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sean_bilet", Storage="_sean", ThisKey="seans_id", OtherKey="seans_id", IsForeignKey=true)]
		public sean sean
		{
			get
			{
				return this._sean.Entity;
			}
			set
			{
				sean previousValue = this._sean.Entity;
				if (((previousValue != value) 
							|| (this._sean.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sean.Entity = null;
						previousValue.bilets.Remove(this);
					}
					this._sean.Entity = value;
					if ((value != null))
					{
						value.bilets.Add(this);
						this._seans_id = value.seans_id;
					}
					else
					{
						this._seans_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("sean");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
